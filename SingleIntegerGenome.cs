// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using GeneticAlgorithms;
namespace GeneticAlgorithms
{
	/// <summary>
	/// Extension of the Genome class where the genetic information in each gene is a single 32-bit integer
	/// </summary>
	public class SingleIntegerGenome : Genome
	{
		/// <summary>
		/// Constructor that takes in an array of integers to be used as genetic information
		/// </summary>
		/// <param name="values">Values.</param>
		public SingleIntegerGenome(int[] values)
		{
			IGene[] genes = new IGene[values.Length];
			for(int i=0; i<values.Length; i++)
			{
				genes[i] = new SingleIntegerGene(values[i]);
			}


			this._setGenes(genes);
		}

		/// <summary>
		/// Empty constructor
		/// </summary>
		public SingleIntegerGenome() : base()
		{

		}
	

		/// <summary>
		/// Returns an array of integers representing the genetic information
		/// </summary>
		/// <returns>The gene integer values.</returns>
		public int[] getGeneIntegerValues()
		{
			int[] values = new int[this.Size()];
			for(int i=0; i<values.Length; i++)
			{
				values[i] = ((Int32)this.getGenes()[i].clone().getGeneticInformation());
			}
			return values;
		}


		public String toString()
		{
			String s = String.Empty;
			foreach(int i in this.getGeneIntegerValues())
			{
				s += (i + " ");
			}
			return s;
		}

        public string GenesToString()
        {
            String s = String.Empty;
            foreach(int i in this.getGeneIntegerValues())
            {
                s += (i + " ");
            }
            return s;
        }


		public override IGenome Clone()
		{
			SingleIntegerGenome newGenome = new SingleIntegerGenome(this.getGeneIntegerValues());
			return newGenome;
		}
	}
}

