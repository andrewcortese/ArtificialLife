// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using GeneticAlgorithms;

	/// <summary>
	/// Factory class for initializing LifeAgentIndividual objects.
	/// </summary>
	public class LifeAgentIndividualFactory : IIndividualFactory
	{
		//initialization classes for components
		IGenomeFactory genomeFactory;
		IGeneFactory geneFactory;

		//how to map genes to traits
		IGeneToTraitMap traitMap;

		//number of genes the individual will have
		int genomeSize;


		/// <summary>
		/// Constructor that takes in objects encapsulating implementation details for various components.
		/// This allows decoupling of this class' responsibilities from those details.
		/// </summary>
		/// <param name="genomeFactory">Genome factory.</param>
		/// <param name="geneFactory">Gene factory.</param>
		/// <param name="traitMap">Trait map.</param>
		/// <param name="genomeSize">Genome size.</param>
		public LifeAgentIndividualFactory (IGenomeFactory genomeFactory, IGeneFactory geneFactory, IGeneToTraitMap traitMap, int genomeSize)
		{
			this.genomeFactory = genomeFactory;
			this.geneFactory = geneFactory;
			this.traitMap = traitMap;
			this.genomeSize = genomeSize;
		}
		

		/// <summary>
		/// Construct the Individual with the specified genome and trait map.
		/// </summary>
		/// <param name="genome">Genome.</param>
		public IIndividual construct (IGenome genome)
		{
			IIndividual individual = new LifeAgentIndividual(genome, this.traitMap, ALGUID.Next());
			return individual;
		}

		/// <summary>
		/// Constructs a random individual in the manner specifies by the genomeFactory, geneFactory, genomeSize, and traitMap encapsulated by this.
		/// </summary>
		/// <returns>The random.</returns>
		public IIndividual constructRandom ()
		{
			IGenome genome = this.genomeFactory.constructRandom(this.geneFactory, this.genomeSize);
			IIndividual individual = new LifeAgentIndividual(genome, this.traitMap, ALGUID.Next());
			return individual;
		}
			
	}


